Servlet
_________________________________________________________________________________________________

Servlet technology is used to create a web application (resides at server side and generates a dynamic web page).
What is a Servlet?
Servlet can be described in many ways, depending on the context.
Servlet is a technology which is used to create a web application.
Servlet is an API that provides many interfaces and classes including documentation.
Servlet is an interface that must be implemented for creating any Servlet.
Servlet is a class that extends the capabilities of the servers and responds to the incoming requests. It can respond to any requests.
Servlet is a web component that is deployed on the server to create a dynamic web page.


common gate way interface before Servlet
__________________________________________________________________________________________________________________
CGI technology enables the web server to call an external program and pass HTTP request information to the external program to process the request. For each request, it starts a new process.

There are many problems in CGI technology:

If the number of clients increases, it takes more time for sending the response.
For each request, it starts a process, and the web server is limited to start processes.
It uses platform dependent language e.g. C, C++, perl.

Advantages of servlet:
There are many advantages of Servlet over CGI. The web container creates threads for handling the multiple requests to the Servlet. Threads have many benefits over the Processes such as they share a common memory area, lightweight, cost of communication between the threads are low.

Better performance: because it creates a thread for each request, not process.
Portability: because it uses Java language.
Robust: JVM manages Servlets, so we don't need to worry about the memory leak, garbage collection, etc.
Secure: because it uses java language.
__________________________________________________________________________________________________
Website: static vs dynamic :	It is a collection of related web pages that may contain text, images, audio and video.

HTTP:	It is the data communication protocol used to establish communication between client and server.

HTTP Requests	It is the request send by the computer to a web server that contains all sorts of potentially interesting information.

HTTP request methods are :

GET :Asks to get the resource at the requested URL.

POST :Asks the server to accept the body info attached. It is like GET request with extra info sent with the request.

HEAD :Asks for only the header part of whatever a GET would return. Just like GET but with no body.

TRACE :Asks for the loopback of the request message, for testing or troubleshooting.

PUT:Says to put the enclosed info (the body) at the requested URL.

DELETE :Says to delete the resource at the requested URL.

OPTIONS :Asks for a list of the HTTP methods to which the thing at the request URL can respond.



GET	                                                                                                     POST
1) In case of Get request, only limited amount of data can be sent because data is sent in header.	In case of post request, large amount of data can be sent because data is sent in body.
2) Get request is not secured because data is exposed in URL bar.	                                Post request is secured because data is not exposed in URL bar.
3) Get request can be bookmarked.	                                                                Post request cannot be bookmarked.
4) Get request is idempotent . It means second request will be ignored until
response of first request is delivered 	                                                                Post request is non-idempotent.
5) Get request is more efficient and used more than Post.	                                        Post request is less efficient and used less than get.


GET- It requests the data from a specified resource
POST- It submits the processed data to a specified resource

Servlet Container :

It provides the runtime environment for JavaEE (j2ee) applications. The client/user can request only a static WebPages from the server. If the user wants to read the web pages as per input then the servlet container is used in java.

The servlet container is the part of web server which can be run in a separate process. We can classify the servlet container states in three types:

Standalone: It is typical Java-based servers in which the servlet container and the web servers are the integral part of a single program. For example:- Tomcat running by itself
In-process: It is separated from the web server, because a different program runs within the address space of the main server as a plug-in. For example:- Tomcat running inside the JBoss.
Out-of-process: The web server and servlet container are different programs which are run in a different process. For performing the communications between them, web server uses the plug-in provided by the servlet container.


Web Server : Web server contains only web or servlet container. It can be used for servlet, jsp, struts, jsf etc. It can't be used for EJB.
It is a computer where the web content can be stored. In general web server can be used to host the web sites but there also used some other web servers also such as FTP, email, storage, gaming etc.

Examples of Web Servers are: Apache Tomcat and Resin.

Application Server : Application server contains Web and EJB containers. It can be used for servlet, jsp, struts, jsf, ejb etc. It is a component based product that lies in the middle-tier of a server centric architecture.

Content Type :

Content Type is also known as MIME (Multipurpose internet Mail Extension)Type. It is a HTTP header that provides the description about what are you sending to the browser.

MIME is an internet standard that is used for extending the limited capabilities of email by allowing the insertion of sounds, images and text in a message.

Servlet API :

The javax.servlet and javax.servlet.http packages represent interfaces and classes for servlet api.

Interfaces in javax.servlet package :

Servlet
ServletRequest
ServletResponse
RequestDispatcher
ServletConfig
ServletContext
SingleThreadModel
Filter
FilterConfig
FilterChain
ServletRequestListener
ServletRequestAttributeListener
ServletContextListener
ServletContextAttributeListener

There are many classes in javax.servlet package. They are as follows:

GenericServlet
ServletInputStream
ServletOutputStream
ServletRequestWrapper
ServletResponseWrapper
ServletRequestEvent
ServletContextEvent
ServletRequestAttributeEvent
ServletContextAttributeEvent
ServletException
UnavailableException


Methods of Servlet interface

GenericServlet class:

There are 5 methods in Servlet interface. The init, service and destroy are the life cycle methods of servlet. These are invoked by the web container.

Http servlet Class :The HttpServlet class extends the GenericServlet class and implements Serializable interface. It provides http specific methods such as doGet, doPost, doHead, doTrace etc.

GenericServlet class implements Servlet, ServletConfig and Serializable interfaces. It provides the implementation of all the methods of these interfaces except the service method.


Http Servlet : The HttpServlet class extends the GenericServlet class and implements Serializable interface. It provides http specific methods such as doGet, doPost, doHead, doTrace etc.
Main methods in http Servlet:
public void service(ServletRequest req,ServletResponse res) dispatches the request to the protected service method by converting the request and response object into http type.
protected void service(HttpServletRequest req, HttpServletResponse res) receives the request from the service method, and dispatches the request to the doXXX() method depending on the incoming http request type.
protected void doGet(HttpServletRequest req, HttpServletResponse res) handles the GET request. It is invoked by the web container.
protected void doPost(HttpServletRequest req, HttpServletResponse res) handles the POST request. It is invoked by the web container.
protected void doHead(HttpServletRequest req, HttpServletResponse res) handles the HEAD request. It is invoked by the web container.
protected void doOptions(HttpServletRequest req, HttpServletResponse res) handles the OPTIONS request. It is invoked by the web container.
protected void doPut(HttpServletRequest req, HttpServletResponse res) handles the PUT request. It is invoked by the web container.
protected void doTrace(HttpServletRequest req, HttpServletResponse res) handles the TRACE request. It is invoked by the web container.
protected void doDelete(HttpServletRequest req, HttpServletResponse res) handles the DELETE request. It is invoked by the web container.
protected long getLastModified(HttpServletRequest req) returns the time when HttpServletRequest was last modified since midnight January 1, 1970 GMT.



GenericServlet class implements Servlet, ServletConfig and Serializable interfaces. It provides the implementation of all the methods of these interfaces except the service method.

Servlet interface:
Servlet interface needs to be implemented for creating any servlet (either directly or indirectly). It provides 3 life cycle methods that are used to initialize the servlet, to service the requests, and to destroy the servlet and 2 non-life cycle methods.

Http Servlet class:
The HttpServlet class extends the GenericServlet class and implements Serializable interface. It provides http specific methods such as doGet, doPost, doHead, doTrace etc.


methods in http servlets 

public void service
protected void service
doget
dopost
do head
do options
do options
do put
do trace
do delete
do last modified


Life cycyle of a servlet :

Servlet class is loaded.
Servlet instance created.
int method is invoked.
service method is invoked.
Destroy method is invoked.

There are given 6 steps to create a servlet example. These steps are required for all the servers.

By implementing Servlet interface,
By inheriting GenericServlet class, (or)
By inheriting HttpServlet class


Deployment descriptor:The deployment descriptor is an xml file, from which Web Container gets the information about the servet to be invoked.

War file:A war (web archive) File contains files of a web project. It may have servlet, xml, jsp, image, html, css, js etc. files.

web archive (war) file contains all the contents of a web application. It reduces the time duration for transferring file.

Advantage of war file
saves time: The war file combines all the files into a single unit. So it takes less time while transferring file from client to server.

load on start up:The load-on-startup element of web-app loads the servlet at the time of deployment or server start if value is positive. It is also known as pre initialization of servlet.'

As you know well, servlet is loaded at first request. That means it consumes more time at first request. If you specify the load-on-startup in web.xml, servlet will be loaded at project deployment time or server start. So, it will take less time for responding to first request.


Servlet Request interface:
An object of ServletRequest is used to provide the client request information to a servlet such as content type, content length, parameter names and values, header informations, attributes etc.


RequestDispatcher:The RequestDispatcher interface provides the facility of dispatching the request to another resource it may be html, servlet or jsp. This interface can also be used to include the content of another resource also. It is one of the way of servlet collaboration.

2 methods they are 
1.forward
2.include

forward:public void forward(ServletRequest request,ServletResponse response)throws ServletException,java.io.IOException:Forwards a request from a servlet to another resource (servlet, JSP file, or HTML file) on the server.

include:public void include(ServletRequest request,ServletResponse response)throws ServletException,java.io.IOException:Includes the content of a resource (servlet, JSP page, or HTML file) in the response.


Send redirect:The sendRedirect() method of HttpServletResponse interface can be used to redirect response to another resource, it may be servlet, jsp or html file.
It accepts relative as well as absolute URL.


Servlet config interface :An object of ServletConfig is created by the web container for each servlet. This object can be used to get configuration information from web.xml file.
If the configuration information is modified from the web.xml file, we don't need to change the servlet. So it is easier to manage the web application if any specific content is modified from time to time.

Servlet context interface :An object of ServletContext is created by the web container at time of deploying the project. This object can be used to get configuration information from web.xml file. There is only one ServletContext object per web application.
An object of ServletContext is created by the web container at time of deploying the project. This object can be used to get configuration information from web.xml file. There is only one ServletContext object per web application.
Easy to maintain if any information is shared to all the servlet, it is better to make it available for all the servlet. We provide this information from the web.xml file, so if the information is changed, we don't need to modify the servlet. Thus it removes maintenance problem.


Difference between ServletConfig and ServletContext:

The servletconfig object refers to the single servlet whereas servletcontext object refers to the whole web application.

Attritube in servlet :
An attribute in servlet is an object that can be set, get or removed from one of the following scopes:
request scope
session scope
application scope

The servlet programmer can pass informations from one servlet to another using attributes. It is just like passing object from one class to another so that we can reuse the same object again and again.

Session simply means a particular interval of time.

Session Tracking is a way to maintain state (data) of an user. It is also known as session management in servlet.

Http protocol is a stateless so we need to maintain state using session tracking techniques. Each time user requests to the server, server treats the request as the new request. So we need to maintain the state of an user to recognize to particular user.


There are four techniques used in Session tracking:

Cookies
Hidden Form Field
URL Rewriting
HttpSession

cookies :A cookie is a small piece of information that is persisted between the multiple client requests.

cookies are two types ;
1.Non-persistent cookie
2.Persistent cookie

Non-persistent cookie:It is valid for single session only. It is removed each time when user closes the browser.

Persistent cookie:It is valid for multiple session . It is not removed each time when user closes the browser. It is removed only if user logout or signout.

Simplest technique of maintaining the state.
Cookies are maintained at client side.
